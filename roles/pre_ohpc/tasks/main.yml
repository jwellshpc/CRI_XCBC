---

#   - name: check hostname
   - fail: 
       msg: "Hostname in inventory/headnode doesn't match local hostname! Please fix and run again."
     when: inventory_hostname != ansible_hostname 

   - fail: 
       msg: "Kernel version mismatch between loaded kernel and group-vars/all! Please fix and run again."
     when: build_kernel_ver != ansible_kernel

   - name: install necessary stuff
     yum:
       name: [
               "MySQL-python",
               "epel-release",
               "wget",
               "tcpdump",
               "whois",
               "lsof",
               "xinetd",
               "vim",
               "net-tools",
               "exportfs",
               "firewalld",
               "chrony",
               "pciutils",
               "rsync",
               "bash-completion",
               "libselinux-python",
               "libsemanage-python",
               "policycoreutils",
               "NetworkManager",
               "NetworkManager-glib",            
             ]
       state: latest
#       - "lua"  # testing; this could fix the lmod-ohpc issue?
 #otherwise, do a yum update --skip-broken, yum update...

   - name: get OpenHPC Repo #hardcoded version # :(
     yum: name={{ openhpc_release_rpm }} state=present
 
   - name: install fail2ban # separate b/c it's in epel
     yum: name=fail2ban state=latest 

#this is only necessary for non-local ansible!
#   - name: turn off requiretty for sudo
#     lineinfile:
#       dest: /etc/sudoers
#       regexp: "Defaults    requiretty"
#       line:  "Defaults    !requiretty"
#       state: present

   - template: src=firewall_conf/services/slurm.xml dest=/etc/firewalld/services/slurm.xml
 
   - template: src=firewall_conf/firewalld.conf dest=/etc/firewalld/firewalld.conf

   - template: src=firewall_conf/zones/internal.xml dest=/etc/firewalld/zones/internal.xml

   - template: src=firewall_conf/zones/public.xml dest=/etc/firewalld/zones/public.xml

   - name: start Network Manager
     service: 
       name: NetworkManager
       state: started
       enabled: yes

   - name: manage interface with nmcli
     nmcli: 
       conn_name: "{{ private_interface }}"
       ifname: "{{ private_interface }}"
       type: ethernet
       state: present

   - name: add private interface to internal zone via nmcli
     command: nmcli connection modify {{ private_interface }} connection.zone internal

   - name: add public interface to public zone via nmcli
     command: nmcli connection modify {{ public_interface }} connection.zone public

   - name: enable masquerade
     firewalld: 
       zone: public
       masquerade: 'yes'
       permanent: yes
       state: enabled
     when: enable_compute_NAT == true

#   - name: restart dbus for firewalld :(
#     service: name=dbus state=restarted

   - name: firewalld restart # to load new slurm service
     service: name=firewalld state=restarted

## This section seems to be redundant 
##   - name: add interface to internal zone firewall-cmd
##     firewalld:
##       zone: internal
##       interface: "{{ private_interface }}"
##       permanent: yes
##       state: enabled
##
##   - name: add interface to external zone firewall-cmd
##     firewalld:
##       zone: public
##       interface: "{{ public_interface }}"
##       permanent: yes
##       state: enabled
##
###   - name: add interfaces to external zone firewalld
###     lineinfile: dest=/etc/sysconfig/network-scripts/ifcfg-{{ public_interface }} regexp=^ZONE= line=ZONE=public
##
##   - name: add services to internal zone firewall-cmd
##     firewalld:
##       zone: internal
##       service: '{{ item }}'
##       permanent: yes
##       immediate: yes
##       state: enabled
##     with_items:
##       - 'slurm'
##       - 'mdns'
##       - 'ipp-client'
##       - 'dhcpv6-client'
##       - 'ssh'
##       - 'nfs'
##       - 'mountd'
##       - 'rpc-bind'
##       - 'http'
##       - 'https'
##       - 'tftp'
##       - 'samba-client'
##
##   - name: firewalld restart
##     service: name=firewalld state=restarted
 
   - name: set up /etc/hosts
     template: src=hosts.j2 dest=/etc/hosts

   - name: set up /etc/ssh/sshd_config
     template: src=sshd_config.j2 dest=/etc/ssh/sshd_config

   - name: restart sshd
     service: name=sshd state=restarted

   - name: selinux allow homedirs
     seboolean: 
       name: use_nfs_home_dirs
       state: yes
       persistent: yes

   - name: create /export dir for software
     file: path=/export state=directory owner=root group=root mode=0777

   - name: open up chrony across private network
     lineinfile:
       path: /etc/chrony.conf
       regexp: '^#allow 192'
       line: "allow all {{ private_network }}/{{ private_network_mask }}"
       state: present
       
 
   - name: enable and restart chrony
     service: name=chronyd state=restarted enabled=yes

